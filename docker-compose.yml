version: "3.3"

services:
  mailhog:
    container_name: docker_mailhog
    image: mailhog/mailhog
    logging:
      driver: none
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mailhognet

  redis:
    image: redis
    container_name: tutorial_redis
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    ports:
      - "6379:6379"
    networks:
      - redisnet

  redis-commander:
    container_name: tutorial_redis-commander
    image: rediscommander/redis-commander
    restart: always
    networks:
      - redisnet
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

  mysql:
    image: mysql:8.0
    command:
      [
        "mysqld",
        "--default-authentication-plugin=mysql_native_password",
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci"
      ]
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    volumes:
      - mysqldata:/var/lib/mysql
    environment:
     MYSQL_DATABASE: wsm
     MYSQL_ROOT_PASSWORD: admin

  backend:
    image: khanhnd1807/wsm:backend
    depends_on:
      mysql:
         condition: service_healthy
      mailhog:
         condition: service_started
      redis:
         condition: service_started
    build:
      context: ./backendwsm/
      dockerfile: Dockerfile
    ports:
      - "8000:6969"
    environment:
      - NODE_SERVER=http://localhost:8000
    container_name: backend
    networks:
      - my-network
      - network_nginx
      - redisnet
      - mailhognet

  frontend:
    stdin_open: true
    container_name: frontend
    image: khanhnd1807/wsm:frontend
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - /app/node_modules
      - ./frontendwsm:/app
    build:
      dockerfile: Dockerfile
      context: ./frontendwsm/
    ports:
      - "8002:3000"
    networks:
      - network_nginx
      - my-network

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    networks:
      - my-network
    ports:
      - "8082:80"
    environment:
      MYSQL_ROOT_PASSWORD: admin #(Required) set the password for the root superuser account.
      PMA_HOST: mysql # define the address/hostname of the mysql server eg mysql container name.
      PMA_USER: root # this is the root user to login on startup
      PMA_PASSWORD: admin # use the root password to login on startup.

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./frontendwsm:/frontend
    depends_on:
      backend:
        condition: service_started
    networks:
      - network_nginx

volumes:
  mysqldata:
networks:
  my-network:
    driver: bridge
  network_nginx:
    driver: bridge
  redisnet:
    driver: bridge
  mailhognet:
    driver: bridge
